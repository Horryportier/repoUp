#! /bin/bash

msg="$(date)"
commitMsg=""
pushMsg=""

help=$(echo -e $(cat <<EOF
        # How to Use\n
___\n
run {gitup} inside of repo to update it\n
___\n
# Flags:
-h | --help for help\n
-a | --all to update all\n
-l | --list to choose from list\n
-d | --daily updates repos in daily list\n
-p | -pull pulls in current working dir\n
EOF
)\
        | gum format -t markdown)

list=""

repos=()

# put your paths to yours repos here
repos[0]="/home/$(whoami)/Documents/CheatSheet"
repos[1]="/home/$(whoami)/Documents/dotfiles"
repos[2]="/home/$(whoami)/Documents/guiUp"
repos[3]="/home/$(whoami)/Documents/TANGO-"
repos[4]="/home/$(whoami)/go/src/github.com/go-jisho"
repos[5]="/home/$(whoami)/Documents/openup"
repos[6]="/home/$(whoami)/Documents/Watcher"


autoUpdate=()

# put your paths to yours repos that you want to update on schedule here
autoUpdate[0]="${repos[0]}"
autoUpdate[1]="${repos[1]}"

buildMsg() {
        title="$1"
        body="$@"
        echo $(cat <<EOF
$body
EOF
)
}

printStyle() {
        style=$(gum style --padding "1 5" "$@")
        if [[ -n "$style" ]]; then
                echo -e "$style"
        fi
}

pull(){
        printStyle "$(buildMsg "Pull:" $(echo -e $(git pull )))"
}

push(){
        if [[ -z "$msg" ]]; then
                msg=$(date)
        fi
        git add .

        commit=$(echo -e "$(git commit -m "$msg")")
        commitMsg="$(buildMsg "Commit:" "$commit")"
        printStyle "$commitMsg"
        pushMsg=$(echo -e "$(git push origin "$(git symbolic-ref --short HEAD)")")
        printStyle "$(buildMsg "Push: ✔️" "$pushMsg")"
}


all() {
        for i in "${repos[@]}"; do
                echo -e "\033[1;32m$i\033[0m"
                cd "$i"
                pull
                push
        done
}
auto() {
        for i in "${autoUpdate[@]}"; do
                echo -e "\033[1;32m$i\033[0m"
                cd "$i"
                pull
                push
        done
}


current() {
        curr=$(pwd)
        echo -e "\033[1;32m$curr\033[0m"
        msg=$(gum input --placeholder "commit msg")
        pull
        push
        exit
}


choose() {
        list=$(gum choose --no-limit ${repos[@]})
        readarray -t items <<< "$list"
        for i in "${items[@]}"; do
                echo -e "\033[1;32m$i\033[0m"
                msg=$(gum input --placeholder "commit msg")
                cd "$i"
                pull
                push
        done
}

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
        -a | --all )
        all
        exit
        ;;
-h | --help )
        printStyle "$help"
        exit
        ;;
-l | --list )
        choose
        exit
        ;;
-d | --daily )
        auto
        exit
        ;;
-p | --pull )
        pull
        exit
        ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


current

exit

